[上一篇文章](https://chenjianlong93.github.io/2017/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RunLoop/)介绍了RunLoop的一些概念性的东西，这一篇将介绍RunLoop在实际开发中的应用。

### 线程保活
提到RunLoop的应用，很多人都会提到AFNetworking2.x中线程保活的例子：

```
+ (void)networkRequestThreadEntryPoint:(id)__unused object {
    @autoreleasepool {
        [[NSThread currentThread] setName:@"AFNetworking"];
        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
        [runLoop run];
    }
}
 
+ (NSThread *)networkRequestThread {
    static NSThread *_networkRequestThread = nil;
    static dispatch_once_t oncePredicate;
    dispatch_once(&oncePredicate, ^{
        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
        [_networkRequestThread start];
    });
    return _networkRequestThread;
}
```
RunLoop 启动前内部必须要有至少一个 Timer/Observer/Source，所以 AFNetworking 在 [runLoop run] 之前先创建了一个新的 NSMachPort 添加进去了。通常情况下，调用者需要持有这个 NSMachPort (mach_port) 并在外部线程通过这个 port 发送消息到 loop 内；但此处添加 port 只是为了让 RunLoop 不至于退出，并没有用于实际的发送消息。

当需要这个后台线程执行任务时，AFNetworking 通过调用 [NSObject performSelector:onThread:..] 将这个任务扔到了后台线程的 RunLoop 中。

```
- (void)start {
    [self.lock lock];
    if ([self isCancelled]) {
        [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];
    } else if ([self isReady]) {
        self.state = AFOperationExecutingState;
        [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];
    }
    [self.lock unlock];
}
```
### Timer使用
我们经常会在应用中看到tableView 的header 上是一个横向ScrollView，一般我们使用NSTimer，每隔几秒切换一张图片。可是当我们滑动tableView的时候，顶部的scollView并不会切换图片，这是因为什么呢？

原因是当我们滑动scrollView时，主线程的RunLoop 会切换到`UITrackingRunLoopMode `这个Mode，执行的也是`UITrackingRunLoopMode `下的任务（Mode中的item），而timer 是添加在`NSDefaultRunLoopMode `下的，所以timer任务并不会执行，只有当`UITrackingRunLoopMode `的任务执行完毕，runloop切换到`NSDefaultRunLoopMode `后，才会继续执行timer。

解决方法有两个：一种是将添加时将Timer的mode 设置为`NSRunLoopCommonModes `即可；另一种就是创建一个子线程，并且将timer加到子线程的RunLoop。线程与RunLoop是一一对应，且不同线程的RunLoop是互不影响的，所以无论子线程timer的mode是什么，timer都能正常工作。

### 滚动视图流畅性优化
我们在UITableView、UICollectionView上加载图片的时候，通常是先在子线程下载网络图片，然后再回到主线程来设置图片。

如果需要设置的图片是像素很大的图片，那么在主线程设置这样的图片势必会相当耗时，导致明显的卡顿。由于之前介绍了RunLoop Mode的切换，知道我们在滑动scrollView的时候，主线程RunLoop会从`NSDefaultRunLoopMode `切换到`UITrackingRunLoopMode `，为了让滑动时的卡顿不那么明显，我们应该把设置图片的操作放到`NSDefaultRunLoopMode `，这样一来，滑动时不做耗时卡顿操作，会显著减轻滑动时的卡顿感。

```
UIImage *downloadedImage = ....;
[self.myImageView performSelector:@selector(setImage:) withObject:downloadedImage afterDelay:0 inModes:@[NSDefaultRunLoopMode]];
```

但是，即便在`NSDefaultRunLoopMode `设置图片，如果一次性设置的图片过多，也还是会引起一开始滑动切换Mode时的卡顿。我们可以将所有需要设置的图片放到一个数组，采用类似串行队列的模式，然后创建一个observer，监听kCFRunLoopBeforeWaiting将要进入休眠时，一张一张地渲染设置到imageview，这样的话就不会有卡顿的问题了。

[具体做法可以参看这个demo](https://github.com/diwu/RunLoopWorkDistribution)

### App卡顿监测
之前已经介绍过RunLoop的执行顺序了，以下是伪代码实现：

```
{
    /// 1. 通知Observers，即将进入RunLoop
    /// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);
    do {
 
        /// 2. 通知 Observers: 即将触发 Timer 回调。
        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);
        /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。
        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);
        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);
 
        /// 4. 触发 Source0 (非基于port的) 回调。
        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);
        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);
     
		/// 6. 通知Observers，即将进入休眠
        /// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();
        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);
 
        /// 7. sleep to wait msg.
        mach_msg() -> mach_msg_trap();
        
 
        /// 8. 通知Observers，线程被唤醒
        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);
 
        /// 9. 如果是被Timer唤醒的，回调Timer
        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);
 
        /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block
        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);
 
        /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件
        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);
 
 
    } while (...);
 
    /// 10. 通知Observers，即将退出RunLoop
    /// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();
    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);
}
```
首先我们要来定义一下怎样才算是卡顿，RunLoop的循环就是处理source、timer、observer这三者的过程，而主线程中交互事件以及其他任务都是在`kCFRunLoopBeforeSources `到`kCFRunLoopBeforeWaiting `再到`kCFRunLoopAfterWaiting `这一段时间之内处理的，所以只要在子线程创建一个timer，定时去检查这几个状态切换的时间，设置一个卡顿阈值，一旦超过这个阈值就将此线程的堆栈信息记录下来，然后上报。

参考资料：

1. [检测iOS的APP性能的一些方法](https://www.jianshu.com/p/802cb5210dc4)
2. [简单监测iOS卡顿的demo](https://www.jianshu.com/p/71cfbcb15842)
3. [微信iOS卡顿监控系统](http://www.360doc.com/content/15/1104/16/28748685_510721166.shtml)


